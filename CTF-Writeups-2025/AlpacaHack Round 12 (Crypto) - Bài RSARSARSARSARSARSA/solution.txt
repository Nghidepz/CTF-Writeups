üîç M√¥ t·∫£:

Challenge y√™u c·∫ßu ch√∫ng ta ph·∫£i t·∫£i file rsarsarsarsarsarsa.tar.gz r·ªìi gi·∫£i n√©n ra hai file output.txt v√† chall.py. Trong file chall.py ch·ª©a source code python m√¥ t·∫£ qu√° tr√¨nh m√£ h√≥a b·∫±ng RSA ƒë·ªÉ ra ƒë∆∞·ª£c d·ªØ li·ªáu ƒë·ªÅ b√†i cung c·∫•p nh∆∞ ·ªü file output.txt

üõ†Ô∏è Gi·∫£i ph√°p:

1. Ph√¢n t√≠ch

Ta th·∫•y source c√≥ v·∫ª kh√° b√¨nh th∆∞·ªùng nh∆∞ng n√≥ c√≥ m·ªôt d√≤ng kh·∫£ nghi v√† n√≥ c≈©ng ch√≠nh l√† ƒëi·ªÉm m·∫•u ch·ªët ƒë·ªÉ gi·∫£i ƒë∆∞·ª£c b√†i n√†y:
	m = bytes_to_long((flag * 1337).encode())

Flag ƒë∆∞·ª£c cho v√†o h√†m ƒë√≥ ƒë·ªÉ bi·∫øn th√†nh m·ªôt s·ªë nguy√™n l·ªõn nh∆∞ng n√≥ c√≤n ƒë∆∞·ª£c l·∫∑p ƒëi l·∫∑p l·∫°i th√™m 1337 l·∫ßn n·ªØa. ƒê√≥ ch√≠nh l√† ƒëi·ªÉm kh√≥ ·ªü b√†i n√†y

2. Khai th√°c

Ta c√≥ d√≤ng code f = bytes_to_long(b'ABC'), b'ABC' c√≥ ƒë·ªô d√†i l√† 3 bytes. Th√¨ ƒë·ªÉ t·∫°o ra b'ABCABC' ch√∫ng ta ph·∫£i n·ªëi b'ABC' v√†o sau b'ABC'.
Bi·ªÉu di·ªÖn v·ªÅ m·∫∑t to√°n h·ªçc, gi√° tr·ªã c·ªßa b'ABC' ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c d·ªãch qua tr√°i 3 byte ƒë·ªÉ t·∫°o ra 3 byte tr·ªëng ph√≠a sau, 3 byte = 24 bits. Do ƒë√≥, gi√° tr·ªã c·ªßa b'ABCABC' l√† m = f * 2¬≤‚Å¥ + f.
Quay l·∫°i b√†i to√°n c·ªßa ch√∫ng ta l√† flag c√≥ ƒë·ªô d√†i l√† 26 bytes = 208 bits. 
Khi ta n·ªëi chu·ªói flag v√†o m·ªôt chu·ªói kh√°c, ch√∫ng ta ƒëang d·ªãch chu·ªói c≈© m·ªôt kho·∫£ng b·∫±ng ƒë·ªô d√†i c·ªßa flag, t·ª©c l√† d·ªãch qua 26 bytes.

S·ªë nguy√™n m ƒë∆∞·ª£c t·∫°o th√†nh t·ª´ 1337 flag ch√≠nh:
 -Kh·ªëi flag cu·ªëi c√πng (th·ª© 1337) l√†: f
 -Kh·ªëi flag g·∫ßn cu·ªëi (th·ª© 1336) ƒë∆∞·ª£c d·ªãch qua 208 bits l√†: f * 2¬≤‚Å∞‚Å∏
 -Kh·ªëi flag th·ª© 1335 ƒë∆∞·ª£c d·ªãch qua 2*208 bits l√†: f * (2¬≤‚Å∞‚Å∏)¬≤
 ...
 -Kh·ªëi flag ƒë·∫ßu ti√™n (th·ª© 1) ƒë∆∞·ª£c d·ªãch qua 1336*208 bits l√†: f * (2¬≤‚Å∞‚Å∏)¬π¬≥¬≥‚Å∂
 
T·ªïng h·ª£p l·∫°i th√¨ ta c√≥: m = f * (2¬≤‚Å∞‚Å∏)¬π¬≥¬≥‚Å∂ + f * (2¬≤‚Å∞‚Å∏)¬π¬≥¬≥‚Åµ + ... + f * 2¬≤‚Å∞‚Å∏ + f

R√∫t f l√†m th·ª´a s·ªë chung => m = f * ((2¬≤‚Å∞‚Å∏)¬π¬≥¬≥‚Å∂+(2¬≤‚Å∞‚Å∏)¬π¬≥¬≥‚Åµ+...+(2¬≤‚Å∞‚Å∏)¬π+1)

Bi·ªÉu th·ª©c trong ngo·∫∑c l√† t·ªïng c·ªßa m·ªôt chu·ªói c·∫•p s·ªë nh√¢n: a = 1, r = 2¬≤‚Å∞‚Å∏, n = 1337

C√¥ng th·ª©c t·ªïng c·∫•p s·ªë nh√¢n l√†: S = a * (r‚Åø - 1) / (r - 1)
=> T·ªïng = 1 * ((2¬≤‚Å∞‚Å∏)¬π¬≥¬≥‚Å∑-1)/(2¬≤‚Å∞‚Å∏-1)
ƒê·∫∑t k = ((2¬≤‚Å∞‚Å∏)¬π¬≥¬≥‚Å∑-1)//(2¬≤‚Å∞‚Å∏-1)
=> m = f * k

Ta ƒë√£ bi·∫øt ƒë∆∞·ª£c c·∫•u tr√∫c c·ªßa m, b∆∞·ªõc ti·∫øp theo l√† thay m v√†o ph∆∞∆°ng tr√¨nh m√£ h√≥a c·ªßa RSA: c ‚â° m·µâ (mod N)
=> c ‚â° (f * k)·µâ (mod N)
=> c ‚â° f·µâ * k·µâ (mod N)

Ta mu·ªën t√¨m f n√™n ph·∫£i c√¥ l·∫≠p f l·∫°i b·∫±ng c√°ch nh√¢n ngh·ªãch ƒë·∫£o Modulo
=> c * (k·µâ)‚Åª¬π ‚â° f·µâ * k·µâ * (k·µâ)‚Åª¬π (mod N)
=> c * (k·µâ)‚Åª¬π ‚â° f·µâ * 1 (mod N)

ƒê·∫∑t c' l√† (c * (k·µâ)‚Åª¬π (mod N)) % N
=> c' ‚â° f·µâ (mod N)

B∆∞·ªõc ti·∫øp theo l√† ph·∫£i lo·∫°i b·ªè ph√©p to√°n Modulo, x√©t v·ªÅ k√≠ch th∆∞·ªõc ta c√≥:
	N = 4096 bits
	f = 208 bits
	e = 19
	f·µâ l√† size_bits(f) * e = 208 * 19 = 3952 bits

C√≥ 3952 < 4096 n√™n c√≥ nghƒ©a l√† f·µâ s·∫Ω nh·ªè h∆°n gi√° tr·ªã c·ªßa N => Khi l·∫•y f·µâ chia cho N th√¨ s·ªë d∆∞ c≈©ng ch√≠nh l√† f·µâ lu√¥n, m√† x√©t √Ω nghƒ©a c·ªßa modulo th√¨ A ‚â° B (mod N) s·∫Ω c√≥ nghƒ©a l√† A = B + k*N v·ªõi k l√† m·ªôt s·ªë nguy√™n n√†o ƒë√≥
=> c' = f·µâ + k*N, c√≥ f·µâ < N v√† c' < N (v√¨ c' l√† k·∫øt qu·∫£ c·ªßa m·ªôt ph√©p mod N) => k ch·∫Øc ch·∫Øn ph·∫£i l√† 0
=> c' = f·µâ

B∆∞·ªõc cu·ªëi c√πng l√† khai cƒÉn ƒë·ªÉ t√¨m ra ƒë∆∞·ª£c f 
=> c' = f·µâ 
=> f = ·µâ‚àöc

V·∫≠y l√† ƒë√£ t√¨m ƒë∆∞·ª£c f (flag)

3. Flag

Alpaca{cryptocryptocrypto}

4. Note

ƒê√¢y l√† c√°ch gi·∫£i c·ªßa m√¨nh v√† c≈©ng c√≥ th·ªÉ l√† ch∆∞a t·ªëi ∆∞u
ƒê·ªÉ l√†m theo ƒë∆∞·ª£c c√°ch c·ªßa m√¨nh th√¨ ph·∫£i t∆∞ duy ph√¢n t√≠ch t·ªët v√† ch√∫ √Ω ƒë∆∞·ª£c ·ªü ch·ªó code kh·∫£ nghi
Code ng·∫Øn nh∆∞ng b∆∞·ªõc ph√¢n t√≠ch th√¨ d√†i
